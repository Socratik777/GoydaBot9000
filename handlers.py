import logging, random, re
from typing import Any

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
pending_actions: dict[int, dict[str, Any]] = {}
logging.basicConfig(level=logging.INFO)
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from goyda_analyzer import (
    score_message,
    analyse_goyda,
)

from database import (
    add_score, get_top, get_bottom, get_user_score, reset_scores,
    add_femboy, get_femboy, get_top_femboy, reset_femboy,
    has_femboy_winner_today, set_femboy_winner
)
from utils import (
    detect_topic, has_goyda, femboy_score_delta, progress_bar, WAHA_KEYWORDS
)
from datetime import datetime, timezone

from pathlib import Path

TRIG_DIR = Path(__file__).parent / "triggers"

def _load_trig(filename: str) -> set[str]:
    with open(TRIG_DIR / filename, encoding="utf-8") as fp:
        return {w.lower() for w in json.load(fp)}

LINUX_KEYWORDS     = _load_trig("linux.json")
UA_SUPPORT_PHRASES = _load_trig("ua_support.json")
ADMIN_JOKE_WORDS   = _load_trig("admin_jokes.json")
GIF_DIR = Path(__file__).parent / "gif"

# –ì–∏—Ñ–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
NEW_USER_GIFS = [
    GIF_DIR / "welcome1.mp4",
    GIF_DIR / "welcome2.mp4",
    GIF_DIR / "welcome3.mp4"
]

# ‚îÄ‚îÄ –ë–∞—Ç—é—à–∫–∞ / Priest triggers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TRIG_DIR = Path(__file__).parent / "triggers"
    
BATYUSHKA_TRIGGERS = _load_trig("batyushka.json") 
# —Å–ø–∏—Å–æ–∫ file_unique_id —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ file_id‚Äô–æ–≤
BATYUSHKA_STICKERS = [
    "CAACAgIAAxkBAAEBbgRoeB0l8qdHd2whvkrpPifxuYnY5gAChVQAArLnKUqcbpJ6EA1fVDYE",
    "CAACAgIAAxkBAAEBbgZoeB2e7hEtv2RTeTIQ2eLT4B3PlwAC800AAqB1SUoDUYJt5o80zDYE"
]

# —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –≤ UTC
BOT_START_TIME = datetime.now(timezone.utc)

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ ¬´–≥–æ–π–¥—É¬ª
GOYDA_FALLBACK = [
    "üéâ –ó–ê –ù–ê–ú–ò –ú–û–°–ö–í–ê!!!",
    "üöÄ –ú–∞—Ç—å –û–±–∞–º—ã –ü–†–û–ë–ò–¢–ê!",
    "ü•Å –¢–ê–ö –î–ï–†–ñ–ê–¢–¨!",
    "üì¢ –í—Å–µ–º —á–∞—Ç–∞–º —Å–ª—ã—à–∏–º —Ç–≤–æ—é –æ—Ä–≥–∏—é!",
    "üöÄ–£—Å–ª—ã—à–∞–ª —Ç–µ–±—è —Ä–æ–¥–Ω–æ–π!"
]
# ------------------------------------------------------------------
# Warhammer / ‚Äú–í–∞—Ö–∞‚Äù detection
WAHA_PHRASES = [
    "–í—ã—É—á–∏–ª –≤—Å–µ—Ö –ø—Ä–∏–º–∞—Ä—Ö–æ–≤, @{user}?",
    "–ê –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –æ–¥–æ–ª–µ—Ç—å —Ç–∏—Ç–∞–Ω–∞ —à—Ç—ã–∫-–Ω–æ–∂–æ–º, –µ—Ä–µ—Ç–∏–∫?",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –æ–¥–æ–±—Ä—è–µ—Ç —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶",
    "–û—á–∏—â–∞–π —á–∞—Ç –æ—Ç –∫—Å–µ–Ω–æ—Å–æ–≤!",
    "–ó–∞ –ò–º–ø–µ—Ä–∏—É–º! –ê—Å—Ç–∞—Ä—Ç—ã, –≤–ø–µ—Ä–µ–¥!",
    "In the grim darkness of the far future, there is only WAR‚Ä¶",
    "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –ö–æ—Ä–æ–ª—é –ó–µ–º–µ–ª—å –ø–æ–º–µ—Ä–∫–Ω—É—Ç—å, @{user}.",
    "–ü–æ–º–Ω–∏ –ó–æ–ª–æ—Ç–æ–π –¢—Ä–æ–Ω, –±—Ä–∞—Ç –ê—Å—Ç–∞—Ä—Ç–µ—Å!",
    "–°–∫–≤–æ–∑—å —Å—Ç–æ –≤–µ–∫–æ–≤ —Å–≤—è—Ç–∞—è —Ü–µ–ª—å –ò–º–ø–µ—Ä–∏—É–º–∞ –≤–µ–¥—ë—Ç –Ω–∞—Å!",
    "–ö–ª—è–Ω—É—Å—å –∫—Ä–æ–≤—å—é –ø–æ–º–∞–∑–∞—Ç—å —ç—Ç–∏—Ö –∫—Å–µ–Ω–æ—Å–æ–≤!",
    "–¢—ã –Ω–µ –≤–∏–¥–µ–ª –•–∞–æ—Å–∞? –û–Ω –≤–∏–¥–∏—Ç —Ç–µ–±—è‚Ä¶",
    "–•—Ä–∞–Ω–∏–ª –ª–∏ —Ç—ã –≤–µ—Ä–Ω–æ—Å—Ç—å –ó–æ–ª–æ—Ç–æ–º—É –¢—Ä–æ–Ω—É, @{user}?",
    "–ë—É–¥–∏ —Å–≤–æ–π –ë–æ–ª—Ç–µ—Ä, —ç—Ä–µ—Ç–∏–∫!",
    "–¢–≤–æ—è –≤–µ—Ä–∞ ‚Äî –Ω–∞—à–µ –æ—Ä—É–∂–∏–µ!",
    "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –í—ã—Å—à–µ–π –ë–∏–±–ª–∏–∏ –ú—É—Å–ø–µ–∫–∞!"
]

# GIF-—ã –¥–ª—è Linux –∏ ¬´–æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—â–∏—Ö –£–∫—Ä–∞–∏–Ω—É¬ª

LINUX_GIF = GIF_DIR / "linuxoid.mp4"
UA_GIFS = [
    GIF_DIR / "ua1.mp4",
    GIF_DIR / "ua2.mp4",
    GIF_DIR / "ua3.mp4",
    GIF_DIR / "ua4.mp4",
    GIF_DIR / "ua5.mp4",
    GIF_DIR / "ua6.mp4",
    GIF_DIR / "ua7.mp4",
    GIF_DIR / "ua8.mp4",
    GIF_DIR / "ua9.mp4",
    GIF_DIR / "ua10.mp4"
]

ADMIN_GIF = GIF_DIR / "admin.mp4"

BATYUSHKA_GIF = GIF_DIR / "batyushka.mp4"
BATYUSHKA_PHRASES = [
    "–ë–∞—Ç—é—à–∫–∞ –ø—Ä–∏—á–∞—Å—Ç–∏–ª—Å—è ‚Äî –Ω–∞—à–∞ –≤–µ—Ä–∞ —É–∫—Ä–µ–ø–∏–ª–∞—Å—å. ‚ò¶üôè",
    "–ë–∞—Ç—é—à–∫–∞ –ø—Ä–∏—á–∞—Å—Ç–∏–ª—Å—è ‚Äî –†—É—Å—å –≤ –º–æ–ª–∏—Ç–≤–µ –æ—Å–≤—è—Ç–∏–ª–∞—Å—å. ‚ò¶",
]

# helper: —Å—Ç–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
async def _delete_invoking_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
        except Exception:
            # –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏—Å—á–µ–∑–ª–æ
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
async def on_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for user in update.message.new_chat_members:
        gif_path = random.choice(NEW_USER_GIFS)
        try:
            with open(gif_path, "rb") as gif:
                await update.message.reply_animation(gif, caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}!", parse_mode="HTML")
        except FileNotFoundError:
            await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}!", parse_mode="HTML")
# ------------------------------------------------------------------
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message.date and update.message.date < BOT_START_TIME:
        return

    chat_id = update.effective_chat.id

    text = update.message.text
    user = update.effective_user
    low  = text.lower()

    # 1) –±–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∏ markdown/–∫–æ–Ω—Ç–µ–∫—Å—Ç (score + reply)
    delta2, reply2 = score_message(text, user.first_name)
    if delta2:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏
        add_score(chat_id, user.id, user.username or user.full_name, delta2)
    # reply2 —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–±–æ —Ñ–∞–Ω—Ñ–∞—Ä—É (CAPSLOCK) –ª–∏–±–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ (lowercase penalty)
    if reply2:
        await update.message.reply_markdown(reply2)
    # –µ—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç –±–µ–∑ custom reply, –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–º ¬´–ì–æ–π–¥–∞!¬ª
    elif delta2 > 0:
    # —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        reply = random.choice(GOYDA_FALLBACK)
        await update.message.reply_text(reply)


    # 2) –∞–Ω–∞–ª–∏–∑ (extra)
    extra = analyse_goyda(text)
    if extra:
        add_score(chat_id, user.id, user.username or user.full_name, extra)

    # 3) –∞–≤—Ç–æ—Ç—Ä–µ–≤–æ–≥–∏
    if any(w in low for w in ("—Å–≤–∏–Ω–æ—Ä–µ–π—Ö", "—Å–≤–∏–Ω–∞–ª–µ–Ω–¥", "—Å–∞–ª–æ–≤–µ–π—Ö", "—Å–∞–ª–æ—Ä–µ–π—Ö")):
        mentions = await _tag_all(context, update.effective_chat.id)
        await update.message.reply_text(f"üö® –°–í–ò–ù–ù–ê–Ø –¢–†–ï–í–û–ì–ê üö® {mentions}")
    if any(w in low for w in ("—Ö–æ—Ö–æ–ª", "–•–æ—Ö–æ–ª", "—Ö–∞—Ö–æ–ª", "—Ö–æ—Ö–ª—ã", "—Ö–∞—Ö–ª—ã", "—Ö–æ—Ö–ª—é–≥–∞", "—Ö–∞—Ö–ª—é–≥–∞", "–•–∞—Ö–æ–ª", "—Ö–∞—Ö–ª—ã", "–ø–∏–¥–æ—Ä")):
        mentions = await _tag_all(context, update.effective_chat.id)
        await update.message.reply_text("üõ°Ô∏è –£–ø–æ–∏–º—è–Ω—É—Ç —Ö–æ—Ö–æ–ª, –ø—Ä–∞–≤–¥–∞ –∑–∞ –Ω–∞–º–∏!")

    topic = detect_topic(text)         
    if topic == "hoi4":
        await update.message.reply_text("üòî –ë–æ–≥ –æ—Å—Ç–∞–≤–∏–ª —ç—Ç–æ—Ç –º–∏—Ä (–•–æ–π–∫–∞ detected).")
    elif topic == "wt":
        await update.message.reply_text("üî• War Thunder detected ‚Äî —É–∫—Ä—ã–≤–∞–π—Ç–µ—Å—å!")
    if "–∫–æ–∫–∞–∫–æ–ª—è" in low:
        await update.message.reply_text("–ù–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –≤ —Å—É–µ –∏–º—è –í–æ–∂–¥—è!")

    # 5) Warhammer-–¥–µ—Ç–µ–∫—Ç–æ—Ä
    if any(kw in low for kw in WAHA_KEYWORDS):
        phrase = random.choice(WAHA_PHRASES).format(user=user.username or user.first_name)
        await update.message.reply_text(phrase)

    # 6) –§–µ–º–±–æ–π-–¥–µ—Ç–µ–∫—Ç–æ—Ä
    delta_fb = femboy_score_delta(text)
    if delta_fb:
        # accumulate points
        add_femboy(chat_id, user.id, delta_fb)
        # check for winner only
        perc = get_femboy(chat_id, user.id)
        today = datetime.utcnow().strftime("%Y-%m-%d")
        if perc >= 100 and not has_femboy_winner_today(chat_id, today):
            await update.message.reply_text(
                f"üå∏üå∏üå∏ –ì–ª–∞–≤–Ω—ã–π —Ñ–µ–º–±–æ–π –¥–Ω—è: @{user.username or user.first_name} ‚Äî 100%! üéâ"
            )
            set_femboy_winner(chat_id, today)
            reset_femboy(chat_id)
    
    # 0) –î–µ—Ç–µ–∫—Ç–æ—Ä —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –º–æ–≤—ã
    if re.search(r"[“ë“ê—î–Ñ—ñ–Ü—ó–á]", text):
        with open(GIF_DIR / "ukr.mp4", "rb") as gif:
            await update.message.reply_animation(gif)
        return
    # 0-A) –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ Linux
    if any(kw in low for kw in LINUX_KEYWORDS):
        with open(LINUX_GIF, "rb") as gif:
            await update.message.reply_animation(gif)
        return

    # 0-B) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –£–∫—Ä–∞–∏–Ω—ã ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –≥–∏—Ñ–∫–∞
    if any(phrase in low for phrase in UA_SUPPORT_PHRASES):
        if UA_GIFS:                    
            path = random.choice(UA_GIFS)
            try:
                with open(path, "rb") as gif:
                    await update.message.reply_animation(gif)
            except FileNotFoundError:
                # —Ñ–∞–π–ª –ø—Ä–æ–ø–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º
                pass
        return
    # 0-C) –®—É—Ç–∫–∏ –ø—Ä–æ –∞–¥–º–∏–Ω–∞/—Å–æ–∑–¥–∞—Ç–µ–ª—è
    if any(w in low for w in ADMIN_JOKE_WORDS):
        with open(ADMIN_GIF, "rb") as gif:
            await update.message.reply_animation(gif)
        return
    # 0-D) –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∞—Ç—é—à–∫–∏
    if "@kotionochekkk" in low:
        msg = random.choice(BATYUSHKA_PHRASES)
        try:
            with open(BATYUSHKA_GIF, "rb") as gif:
                await update.message.reply_animation(gif, caption=msg)
        except FileNotFoundError:
            await update.message.reply_text(msg)
        return

    # 0-E) –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if "@ardoran_wolperlinger" in low:
        try:
            with open(GIF_DIR / "adminGoida.mp4", "rb") as gif:
                await update.message.reply_animation(
                    gif, caption="–û—Ö –∑—Ä—è —Ç—ã –ø–∏–Ω–≥–∞–Ω—É–ª –∞–¥–º–∏–Ω–∞, –ø–æ–∫–∞ –æ–Ω —Ç—Ä–æ–≥–∞–µ—Ç —Ç—Ä–∞–≤—É, –±–µ–∑ –±–∞–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç..."
                )
        except FileNotFoundError:
            await update.message.reply_text(
                "–û—Ö –∑—Ä—è —Ç—ã –ø–∏–Ω–≥–∞–Ω—É–ª –∞–¥–º–∏–Ω–∞, –ø–æ–∫–∞ –æ–Ω —Ç—Ä–æ–≥–∞–µ—Ç —Ç—Ä–∞–≤—É, –±–µ–∑ –±–∞–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç..."
            )
        return
    # 0-d-1) ‚Üí —Å—Ç–∏–∫–µ—Ä
    if any(b in low for b in BATYUSHKA_TRIGGERS):
        sticker_id = random.choice(BATYUSHKA_STICKERS)
        try:
            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º named-–∞—Ä–≥—É–º–µ–Ω—Ç sticker
            await update.message.reply_sticker(sticker=sticker_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ {sticker_id}: {e}")
        return
# ------------------------------------------------------------------
#  /goyda ‚Äî –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
async def cmd_goyda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    top = get_top(chat_id, 3)
    bottom = get_bottom(chat_id, 3)

    ranks_top = ["üèÜ –ì–æ–π–¥–∞!", "ü•∞ –ü–æ–¥–Ω–∞–≥–æ–π–¥–∏", "üòò –ì–æ–π–¥–∏"]
    ranks_bot = ["üò° –ê–Ω—Ç–∏–≥–æ–π–¥–∞", "üò† –ø–æ—á—Ç–∏ –ø—Ä–æ–≥–æ–π–¥–∏–ª", "üòî –Ω–µ —É–≥–æ–π–¥–∏–ª"]

    lines = []
    for (u, s), rank in zip(top, ranks_top):
        lines.append(f"{rank}: {u} ({s})")

    lines.append("‚Äî‚Äî‚Äî")

    for (u, s), rank in zip(bottom, ranks_bot):
        lines.append(f"{rank}: {u} ({s})")

    await update.message.reply_text("\n".join(lines))

# ------------------------------------------------------------------
#  /admin  ‚Äì –ø–∞–Ω–µ–ª—å
async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (is_main_admin(update) or is_creator(update)):
        return

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚Üª –†–µ—Å—Ç–∞—Ä—Ç", callback_data="admin_restart"),
        InlineKeyboardButton("üëÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
    ]])
    await update.message.reply_text("üîß Admin panel:", reply_markup=kb)

async def admin_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    # only allow creator or main admins
    if not (is_main_admin(update) or is_creator(update)):
        await q.answer()  # silently acknowledge, no rights
        return

    admin_id = update.effective_user.id
    if q.data == "admin_restart":
        await q.answer(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω üîÑ", show_alert=True)
        import sys, os, signal
        os.kill(os.getpid(), signal.SIGINT)
        return
    elif q.data == "admin_kaznit":
        pending_actions[admin_id]["action"] = "kaznit"
        await q.answer()
        await context.bot.send_message(admin_id, "–ö–æ–≥–æ –∫–∞–∑–Ω–∏—Ç—å? –ü—Ä–∏—à–ª–∏—Ç–µ @username –≤ –æ—Ç–≤–µ—Ç.")
    elif q.data == "admin_titul":
        pending_actions[admin_id]["action"] = "titul"
        await q.answer()
        await context.bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: @user –Ω–æ–≤—ã–π_—Ç–∏—Ç—É–ª")
    elif q.data == "admin_femprocent":
        pending_actions[admin_id]["action"] = "femprocent"
        await q.answer()
        await context.bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: @user ¬±N (–Ω–∞–ø—Ä–∏–º–µ—Ä +10)")
    elif q.data == "admin_iskazi":
        pending_actions[admin_id]["action"] = "iskazi"
        await q.answer()
        await context.bot.send_message(admin_id, "–ö–æ–≥–æ –∏—Å–∫–∞–∂–∞—Ç—å? –ü—Ä–∏—à–ª–∏—Ç–µ @username.")
    elif q.data == "admin_bot_say":
        pending_actions[admin_id]["action"] = "bot_say"
        await q.answer()
        await context.bot.send_message(admin_id, "–ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞?")
    elif q.data == "admin_ukaz":
        pending_actions[admin_id]["action"] = "ukaz"
        await q.answer()
        await context.bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–∫–∞–∑–∞.")
    elif q.data == "admin_v_podval":
        pending_actions[admin_id]["action"] = "v_podval"
        await q.answer()
        await context.bot.send_message(admin_id, "–ö—Ç–æ —Å–æ—Å–ª–∞–Ω –≤ –ø–æ–¥–≤–∞–ª? –í–≤–µ–¥–∏—Ç–µ @username.")
    elif q.data == "admin_ochistit":
        pending_actions[admin_id]["action"] = "ochistit"
        await q.answer()
        await context.bot.send_message(admin_id, "–ö—Ç–æ –æ—á–∏—â–µ–Ω —Å–≤—è—Ç–æ–π –≥–æ–π–¥–æ–π? –í–≤–µ–¥–∏—Ç–µ @username.")
    elif q.data == "admin_pokaisa":
        pending_actions[admin_id]["action"] = "pokaisa"
        await q.answer()
        await context.bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—é—â–µ–≥–æ—Å—è.")
    elif q.data == "admin_femboy_random":
        pending_actions[admin_id]["action"] = "femboy_random"
        await q.answer()
        await context.bot.send_message(admin_id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–µ–º–±–æ—è.")
    elif q.data == "admin_experiment":
        pending_actions[admin_id]["action"] = "experiment"
        await q.answer()
        await context.bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# ------------------------------------------------------------------
#  /femboy ‚Äì —Å–ª—É—á–∞–π–Ω—ã–π ¬´–≥–ª–∞–≤–Ω—ã–π —Ñ–µ–º–±–æ–π¬ª
async def cmd_femboy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    members = [m.user for m in await chat.get_administrators()] + \
              [update.effective_user]
    winner = random.choice(members)
    await update.message.reply_text(f"üå∏ –°–µ–≥–æ–¥–Ω—è –≥–ª–∞–≤–Ω—ã–π —Ñ–µ–º–±–æ–π —á–∞—Ç–∞ ‚Äî @{winner.username or winner.first_name}!")

# ------------------------------------------------------------------
async def cmd_femboy_self(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    perc = get_femboy(chat_id, user_id)
    bar = progress_bar(perc)
    await update.message.reply_text(f"üå∏ –¢–≤–æ—è —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç—å: {bar} {perc}%")

# ------------------------------------------------------------------
# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Å–æ–±–∏—Ä–∞–µ–º @username –∞–¥–º–∏–Ω–æ–≤/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def _tag_all(ctx, chat_id: int) -> str:
    members = await ctx.bot.get_chat_administrators(chat_id)
    names = [f"@{m.user.username}" for m in members if m.user.username]
    return " ".join(names)

# ------------------------------------------------------------------


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CREATOR_ID: int = 2629375962          # id @KOKAKOLYA24
MAIN_ADMIN_IDS: set[int] = {1239146968, 5100009483}  # id DiplomastersRU, Ardoran‚Ä¶

def is_creator(update: Update) -> bool:
    return update.effective_user.id == CREATOR_ID

def is_main_admin(update: Update) -> bool:
    return update.effective_user.id in MAIN_ADMIN_IDS or is_creator(update)

# helper to delete invoking message
async def _delete_invoking_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
        except Exception:
            pass

async def cmd_bot_say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (is_main_admin(update) or is_creator(update)):
        return
    await _delete_invoking_message(update, context)
    user = update.effective_user
    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚Ä¶"
        )
        return
    # –ª–∏–º–∏—Ç: —Ç–æ–ª—å–∫–æ –¶–∞—Ä—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∞–¥–º–∏–Ω—ã ‚Äî –¥–æ 100 –≤ —Å—É—Ç–∫–∏
    key = f"say_count:{user.id}:{datetime.utcnow().date()}"
    count = context.chat_data.get(key, 0)
    if not is_creator(update) and count >= 1999:
        await update.message.reply_text("–õ–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ /–±–æ—Ç_—Å–∫–∞–∂–∏ –∏—Å—á–µ—Ä–ø–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    context.chat_data[key] = count + 1
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

async def cmd_kaznit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_main_admin(update):
        return
    await _delete_invoking_message(update, context)
    args = context.args
    if not args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ–≥–æ –∫–∞–∑–Ω–∏—Ç—å? –£–∫–∞–∂–∏ @username.")
        return
    chat_id = update.effective_chat.id
    target_id = await resolve_user_by_username(chat_id, args[0], context.bot)
    if not target_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # 20% —à–∞–Ω—Å –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è
    if random.random() < 0.2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, @{args[0].lstrip('@')} –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–º.")
    else:
        reset_scores(chat_id)               # —Å–±—Ä–æ—Å –≥–æ–π–¥—ã
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"ü©∏ @{args[0].lstrip('@')} –æ–±–≤–∏–Ω—ë–Ω –≤ –µ—Ä–µ—Å–∏. –û—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã."
        )

async def cmd_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_main_admin(update):
        return
    await _delete_invoking_message(update, context)
    if len(context.args) < 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π: /—Ç–∏—Ç—É–ª @user <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    chat_id = update.effective_chat.id
    target_mention = context.args[0]
    title = " ".join(context.args[1:])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üéñ {target_mention} ‚Äî {title}")

async def cmd_femboy_adjust(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_main_admin(update):
        return
    await _delete_invoking_message(update, context)
    if len(context.args) != 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π: /—Ñ–µ–º–ø—Ä–æ—Ü–µ–Ω—Ç @user +10")
        return
    chat_id = update.effective_chat.id
    target = context.args[0]
    delta = int(context.args[1])
    target_id = await resolve_user_by_username(chat_id, target, context.bot)
    if not target_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    # –ø—Ä–∏–º–µ–Ω—è–µ–º
    add_femboy(chat_id, target_id, delta)
    perc = get_femboy(chat_id, target_id)
    bar = progress_bar(perc)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{target} —Å—Ç–∞–ª –±–æ–ª–µ–µ —Ñ–µ–º–±–æ–µ–º –Ω–∞ {delta}%. –°–µ–π—á–∞—Å: {bar} {perc}%"
    )

async def cmd_twist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_main_admin(update):
        return
    await _delete_invoking_message(update, context)
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ–≥–æ –∏—Å–∫–∞–∂–∞—Ç—å? /–∏—Å–∫–∞–∑–∏ @user")
        return
    chat_id = update.effective_chat.id
    target = context.args[0]
    uid = await resolve_user_by_username(chat_id, target, context.bot)
    if not uid:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    # –¥–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ context.chat_data (–Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ on_message)
    last = context.chat_data.get(f"last_msg:{uid}")
    if not last:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–ª–æ–≤
    twisted = last.replace("–≥–æ–π–¥–∞", "—Ö–æ–π–¥–∞").replace("–ì–æ–π–¥–∞", "–•–æ–π–¥–∞")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"¬´{twisted}¬ª")

async def cmd_ukaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update):
        return
    await _delete_invoking_message(update, context)
    text = update.message.text.partition(" ")[2].strip()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üìú –¶–∞—Ä—Å–∫–∏–π —É–∫–∞–∑ –æ—Ç @{CREATOR}:\n¬´{text}¬ª"
    )

async def cmd_to_dungeon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update):
        return
    await _delete_invoking_message(update, context)
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ–≥–æ —Å–æ—Å–ª–∞—Ç—å? /–≤_–ø–æ–¥–≤–∞–ª @user")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{context.args[0]} —Å–æ—Å–ª–∞–Ω –≤ –ø–æ–¥–≤–∞–ª —Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ –∞–Ω—Ç–∏-–≥–æ–π–¥–æ–≤—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é.")

async def cmd_cleanse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update):
        return
    await _delete_invoking_message(update, context)
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ–≥–æ –æ—á–∏—â–∞—Ç—å? /–æ—á–∏—Å—Ç–∏—Ç—å @user")
        return
    # —Å–±—Ä–æ—Å —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏
    cid = update.effective_chat.id
    uname = context.args[0].lstrip("@")
    member = await context.bot.get_chat_member(cid, uname)
    reset_femboy(cid, member.user.id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{context.args[0]} –æ—á–∏—â–µ–Ω —Å–≤—è—Ç–æ–π –≥–æ–π–¥–æ–π. –§–µ–º–±–æ–π-–Ω–∞–ª—ë—Ç 0%.")

async def cmd_repent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update):
        return
    await _delete_invoking_message(update, context)
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ–º–∞–Ω–¥–∞: /–ø–æ–∫–∞–π—Å—è @user")
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–ø–∏—à–∏: ¬´–Ø –≥—Ä–µ—à–µ–Ω, –∏–±–æ –Ω–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–ª ‚Äú–ì–æ–π–¥—É‚Äù –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç.¬ª")

# 7) –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ /–∞–¥–º–∏–Ω–∫–∞
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not (is_main_admin(update) or is_creator(update)):
        return

    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤—ã–∑–≤–∞–ª–∏ –ø–∞–Ω–µ–ª—å
    pending_actions[update.effective_user.id] = {
        "chat_id": update.effective_chat.id,
        "action": None,
    }

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Üª Restart",     callback_data="admin_restart"),
            InlineKeyboardButton("üëÅ Stats",      callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton("‚ö° –ö–∞–∑–Ω–∏—Ç—å",     callback_data="admin_kaznit"),
            InlineKeyboardButton("üè∑ –¢–∏—Ç—É–ª",       callback_data="admin_titul"),
        ],
        [
            InlineKeyboardButton("üíØ –§–µ–º–ø—Ä–æ—Ü–µ–Ω—Ç",  callback_data="admin_femprocent"),
            InlineKeyboardButton("üîÄ –ò—Å–∫–∞–∑–∏",      callback_data="admin_iskazi"),
        ],
        [
            InlineKeyboardButton("üé≠ –°–∫–∞–∑–∞—Ç—å",     callback_data="admin_bot_say"),
            InlineKeyboardButton("üìú –£–∫–∞–∑",        callback_data="admin_ukaz"),
        ],
        [
            InlineKeyboardButton("‚õì –í –ø–æ–¥–≤–∞–ª",     callback_data="admin_v_podval"),
            InlineKeyboardButton("üßº –û—á–∏—Å—Ç–∏—Ç—å",    callback_data="admin_ochistit"),
        ],
        [
            InlineKeyboardButton("üôè –ü–æ–∫–∞–π—Å—è",     callback_data="admin_pokaisa"),
            InlineKeyboardButton("üå∏ –§–µ–º–±–æ–π –¥–Ω—è",  callback_data="admin_femboy_random"),
        ],
        [
            InlineKeyboardButton("üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", callback_data="admin_experiment"),
        ],
    ])

    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ ‚îÄ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.effective_chat.type != "private":
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
        except Exception:
            pass  # –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª–∏—Ç—å ‚îÄ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="üîß Admin Panel:",
        reply_markup=kb
    )


# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ ----
async def on_private_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending_actions:
        return
    info = pending_actions[uid]
    action = info.get("action")
    group_id = info.get("chat_id")
    if not action or not group_id:
        return

    arg = update.message.text.strip()

    if action == "kaznit":
        await context.bot.send_message(group_id, f"ü©∏ {arg} –æ–±–≤–∏–Ω—ë–Ω –≤ –µ—Ä–µ—Å–∏. –û—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã.")
    elif action == "titul":
        parts = arg.split(maxsplit=1)
        if len(parts) == 2:
            await context.bot.send_message(group_id, f"üéñ {parts[0]} ‚Äî {parts[1]}")
    elif action == "femprocent":
        await context.bot.send_message(group_id, f"–ö–æ–º–∞–Ω–¥–∞ /femprocent: {arg}")
    elif action == "iskazi":
        await context.bot.send_message(group_id, f"–ö–æ–º–∞–Ω–¥–∞ /iskazi: {arg}")
    elif action == "bot_say":
        await context.bot.send_message(group_id, arg)
    elif action == "ukaz":
        await context.bot.send_message(group_id, f"üìú –¶–∞—Ä—Å–∫–∏–π —É–∫–∞–∑: \n¬´{arg}¬ª")
    elif action == "v_podval":
        await context.bot.send_message(group_id, f"{arg} —Å–æ—Å–ª–∞–Ω –≤ –ø–æ–¥–≤–∞–ª.")
    elif action == "ochistit":
        await context.bot.send_message(group_id, f"{arg} –æ—á–∏—â–µ–Ω —Å–≤—è—Ç–æ–π –≥–æ–π–¥–æ–π.")
    elif action == "pokaisa":
        await context.bot.send_message(group_id, "–ù–∞–ø–∏—à–∏: ‚Äò–Ø –≥—Ä–µ—à–µ–Ω, –∏–±–æ –Ω–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–ª –ì–æ–π–¥—É –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç.‚Äô")
    elif action == "femboy_random":
        await context.bot.send_message(group_id, "üå∏ –ì–ª–∞–≤–Ω—ã–π —Ñ–µ–º–±–æ–π –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ! üå∏")
    elif action == "experiment":
        await context.bot.send_message(group_id, random.choice(["–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç 1", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç 2"]))

    pending_actions.pop(uid, None)

async def cmd_experiment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (is_main_admin(update) or is_creator(update)):
        return
    await _delete_invoking_message(update, context)
    ans = random.choice([
        "–§–µ–º–±–æ–π –ø—Ä–µ–≤—Ä–∞—â—ë–Ω –≤ –≥–æ–π–¥–æ–±–æ—Ç–∞.",
        "–ì–µ–Ω–µ—Ä–∞–ª –ì–æ–π–¥–∞ –≤ —Å—Ç—Ä–æ—é!",
        "–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –ú–∞–≤–∑–æ–ª–µ–π –ú—è—É."
    ])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=ans)

async def cmd_femboy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (is_main_admin(update) or is_creator(update)):
        return
    await _delete_invoking_message(update, context)
    chat = update.effective_chat
    members = [m.user for m in await chat.get_administrators()] + \
              [update.effective_user]
    winner = random.choice(members)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üå∏ –°–µ–≥–æ–¥–Ω—è –≥–ª–∞–≤–Ω—ã–π —Ñ–µ–º–±–æ–π —á–∞—Ç–∞ ‚Äî @{winner.username or winner.first_name}!")

async def cmd_femboy_self(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _delete_invoking_message(update, context)
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    perc = get_femboy(chat_id, user_id)
    bar = progress_bar(perc)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üå∏ –¢–≤–æ—è —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç—å: {bar} {perc}%")


# ------------------------------------------------------------------
# Unified handler registration
def register_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –∏–∑ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
    app.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
            on_message
        )
    )

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    app.add_handler(CommandHandler("goyda", cmd_goyda))
    app.add_handler(MessageHandler(filters.Regex(r"^/goyda(_—Ç–æ–ø)?"), cmd_goyda))

    # –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ –∏ callback
    app.add_handler(CommandHandler("admin", show_admin_panel))
    # Handle all admin_* callback buttons
    app.add_handler(CallbackQueryHandler(admin_cb, pattern=r"^admin_"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, on_private_reply))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ (–∏ —Ü–∞—Ä—Å–∫–∏–µ) –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("kaznit", cmd_kaznit))
    app.add_handler(CommandHandler("titul", cmd_title))
    app.add_handler(CommandHandler("femprocent", cmd_femboy_adjust))
    app.add_handler(CommandHandler("iskazi", cmd_twist))
    app.add_handler(CommandHandler("bot_skazhi", cmd_bot_say))
    app.add_handler(CommandHandler("ukaz", cmd_ukaz))
    app.add_handler(CommandHandler("v_podval", cmd_to_dungeon))
    app.add_handler(CommandHandler("ochistit", cmd_cleanse))
    app.add_handler(CommandHandler("pokaisa", cmd_repent))
    app.add_handler(CommandHandler("experiment", cmd_experiment))
    app.add_handler(CommandHandler("femboy", cmd_femboy_self))
    app.add_handler(CommandHandler("femboy_random", cmd_femboy))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, on_new_member))
